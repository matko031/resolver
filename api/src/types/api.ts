/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


export interface paths {
  "/qrcode/{codeId}": {
    /** Go to the final location of a qr code specified by the {qrID} */
    get: {
      parameters: {
        path: {
          /** @description Numeric ID of the QR code */
          codeId: number;
        };
      };
      responses: {
        /** @description Go to the URL pointed by the QR code */
        302: {
          content: never;
        };
        404: components["responses"]["404"];
      };
    };
    /** Modify an existing QR code. If the QR code in question does not exist, one will be created */
    put: {
      parameters: {
        path: {
          /** @description Numeric ID of the QR code */
          codeId: number;
        };
      };
      requestBody: {
        content: {
          "application/json": components["schemas"]["QRurl"];
        };
      };
      responses: {
        /** @description Modified QR */
        200: {
          content: {
            "application/json": components["schemas"]["QRfull"];
          };
        };
        /** @description The created QR */
        201: {
          content: {
            "application/json": components["schemas"]["QRfull"];
          };
        };
        400: components["responses"]["400"];
        404: components["responses"]["404"];
      };
    };
    /** Delete a qr code */
    delete: {
      parameters: {
        path: {
          /** @description Numeric ID of the QR code */
          codeId: number;
        };
      };
      responses: {
        /** @description Code has been deleted */
        204: {
          content: never;
        };
        404: components["responses"]["404"];
      };
    };
  };
  "/qrcode": {
    /** Get all the QR entries */
    get: {
      responses: {
        /** @description A list of IDs and URls */
        200: {
          content: {
            "application/json": components["schemas"]["QRfull"][];
          };
        };
      };
    };
    /** Create a new QR code */
    post: {
      requestBody: {
        content: {
          "application/json": components["schemas"]["QRurl"];
        };
      };
      responses: {
        /** @description The created QR */
        201: {
          content: {
            "application/json": components["schemas"]["QRfull"];
          };
        };
        400: components["responses"]["400"];
        404: components["responses"]["404"];
      };
    };
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    QRfull: {
      id: number;
      url: string;
    };
    QRurl: {
      url: string;
    };
    "4xxBody": {
      message?: string;
      errors: {
          message?: string;
        }[];
    };
  };
  responses: {
    /** @description Bad request. */
    400: {
      content: {
        "application/problem+json": components["schemas"]["4xxBody"];
      };
    };
    /** @description Unauthorized. */
    401: {
      content: {
        "application/problem+json": components["schemas"]["4xxBody"];
      };
    };
    /** @description Not Found. */
    404: {
      content: {
        "application/problem+json": components["schemas"]["4xxBody"];
      };
    };
  };
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type $defs = Record<string, never>;

export type external = Record<string, never>;

export type operations = Record<string, never>;
